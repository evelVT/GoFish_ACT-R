;;; Model of Go Fish
;;;

(add-dm
    (4Full isa fullSet needCards four)
    (goal isa goal state start)
)

(set-all-baselevels -100 10) ;; time offset and number of references

;; At the start of the model, retrieve any decision
(p game-start
   =goal>
     isa goal
     state start
==>
   =goal>
     state checkTurn
)


(p checkTurn-DiffP
   =goal>
     isa goal
     state checkTurn
   =action>
     isa Turn
     player  "opponent_turn"
==>
   =goal>
     state remember-asking
   -action>
)

(p remember-player-asking-diff
   =goal>
     isa goal
     state remember-asking
   =action>
     isa ask
     playerAsking  =player1
     rank  =askedR
     playerAsked =player2
==>
   =goal>
     state remember-asked
   =action>
   +imaginal>
     isa playerHas
     player =player1
     rank  =askedR
   -imaginal>
)


(p remember-player-asked
   =goal>
     isa goal
     state remember-asked
   =action>
     isa ask
     player  =player2
     rank  =askedR
==>
   =goal>
     state checkTurn
   +imaginal>
     isa playerHasNo
     player =player2
     rank  =askedR
  -action>
  -imaginal>
)


(p remember-player-asking-model
   =goal>
     isa goal
     state remember-asking
   =action>
     isa ask
     playerAsking  =player1
     rank  =askedR
     playerAsked "model_turn"
==>
   +goal>
     state check-rank
     rank =askedR
   +imaginal>
     isa playerHas
     player =player1
     rank  =askedR
   +action>
     isa inHand
     rank =askedR
   -imaginal>

)

(p model-is-asked-has
   =goal>
     isa goal
     state check-rank
     rank =askedR
   =action>
     isa inHand
     rank  =askedR
     isThere  "yes"
==>
   =goal>
     state checkTurn
   ;+action>
    ; isa response
     ;rank =askedR
     ;give "yes"
)

(p model-is-asked-has-no
   =goal>
     isa goal
     state check-rank
     rank =askedR
   =action>
     isa inHand
     rank  =askedR
     isThere  "no"
==>
   =goal>
     state checkTurn
  ; +action>
    ; isa response
    ; rank =askedR
    ; give "Go_Fish"
)

(p checkTurn-M
   =goal>
     isa goal
     state checkTurn
   =action>
     isa Turn
     player  "model_turn"
==>
   =goal>
     state check-hand
   +action>
     isa inHand
     isThere =yes
)

(p checkHand
   =goal>
     isa goal
     state check-hand
   =action>
     isa inHand
     rank =seenR
     isThere  =yes
==>
   +goal>
     state check-if-asked
     rank =seenR
   +retrieval>
     isa playerHas
     rank  =seenR
)

(p rank-no-one-has
   =goal>
     isa goal
     state check-if-asked
     rank =seenR
   =retrieval>
     isa playerHas
     rank  =seenR
     player nil
==>
   =goal>
     state checkHand
   +action>
     isa inHand
     isThere =yes
     checked-this-round =no
)

(p rank-one-has
   =goal>
     isa goal
     state check-if-asked
     rank =seenR
   =retrieval>
     isa playerHas
     rank  =seenR
     player =player1
==>
   +goal>
     state request-player
     rank =seenR
     player  =player1
   -retrieval>
)

(p make-request
   =goal>
     isa goal
     state request-player
     rank =seenR
     player  =player1
==>
   +goal>
     state check-response
     rank =seenR
   +action>
     isa request
     rank seenR
     player =player1
  ; +imaginal>
	; isa round
	; player =player1
	; rank  =seenR
  ; -imaginal>
)

(p cards-not-received
   =goal>
	 isa goal
	 state check-response
	 rank =seenR
   =action>
	 isa response-player
	 rank =seenR
	 give =Go-fish
==>
   +goal>
	 state checkTurn
   +action>
     isa request
     player =pile
)

(p cards-received
   =goal>
	 isa goal
	 state check-response
     rank =seenR
   =action>
	 isa response-player
	 rank =seenR
	 give =yes
     number =num
==>
   +goal>
     state check-set
     rank =seenR
   +imaginal>
	 isa playerHasNo
	 player =player1
	 rank  =seenR
   +action>
     isa inHand
     rank =seenR
   -imaginal>
)

(p check-set
   =goal>
	 isa goal
	 state check-set
	 rank =seenR
   =action>
     isa inHand
     rank =seenR
     number =num
==>
   =goal>
	 state check-still-need
     rank =seenR
     haveCards =num
   +retrieval>
	 isa fullSet
)

(p no-need
   =goal>
	 isa goal
	 state check-still-need
	 rank =seenR
     haveCards =num
   =retrieval>
	 isa fullSet
     needCards =num
 ==>
   =goal>
	 state check-hand
   +action>
	 isa makeSet
     rank =seenR
   -retrieval>
)

(p still-need
   =goal>
	 isa goal
	 state check-still-need
	 rank =seenR
     haveCards =num1
   =retrieval>
	 isa fullSet
     needCards =num2
 ==>
   +goal>
     state check-if-asked
     rank =seenR
   -retrieval>
   +retrieval>
     isa playerHas
     rank  =seenR
)

(p no-player-has
   =goal>
	 isa goal
	 state check-hand
   =action>
	 isa noPlayerHasAny
   players "none"
==>
   =goal>
	 state pick-random
   +action>
     isa pickRandom
)

(p random-pick
   =goal>
	 isa goal
	 state pick-random
   =action>
	 isa pickRandom
     rank =randomR
     player =randomP
==>
   =goal>
	 state request-player
     rank =randomR
     player  =randomP
   -action>
)

(goal-focus goal)

